{
  "description": "A component that renders a <MultiSelect /> to be used inside forms.",
  "displayName": "MultiSelect",
  "methods": [
    {
      "name": "getDerivedStateFromProps",
      "docblock": null,
      "modifiers": [
        "static"
      ],
      "params": [
        {
          "name": "props",
          "type": null
        },
        {
          "name": "state",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "setItems",
      "docblock": "Used by onSearch to change the dropdown items that exist",
      "modifiers": [],
      "params": [
        {
          "name": "items",
          "type": {
            "name": "Array",
            "elements": [
              {
                "name": "signature",
                "type": "object",
                "raw": "{\n  label: string,\n  value: string,\n}",
                "signature": {
                  "properties": [
                    {
                      "key": "label",
                      "value": {
                        "name": "string",
                        "required": true
                      }
                    },
                    {
                      "key": "value",
                      "value": {
                        "name": "string",
                        "required": true
                      }
                    }
                  ]
                }
              }
            ],
            "raw": "Array<Item>",
            "alias": "Items"
          }
        }
      ],
      "returns": {
        "type": {
          "name": "void"
        }
      },
      "description": "Used by onSearch to change the dropdown items that exist"
    },
    {
      "name": "stateReducer",
      "docblock": "Callback Fn from Downshift that exposes\nstate and event triggers such as keyboard\nand mouse events",
      "modifiers": [],
      "params": [
        {
          "name": "state"
        },
        {
          "name": "changes"
        }
      ],
      "returns": null,
      "description": "Callback Fn from Downshift that exposes\nstate and event triggers such as keyboard\nand mouse events"
    },
    {
      "name": "handleStateChange",
      "docblock": "Callback Fn from downshift that exposes changes",
      "modifiers": [],
      "params": [
        {
          "name": "changes"
        },
        {
          "name": "downshiftStateAndHelpers"
        }
      ],
      "returns": null,
      "description": "Callback Fn from downshift that exposes changes"
    },
    {
      "name": "onAddTag",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "item",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "onRemoveTag",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "item",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "popValue",
      "docblock": null,
      "modifiers": [],
      "params": [],
      "returns": null
    },
    {
      "name": "onInputChange",
      "docblock": "Change state to reflect new inputValue typed by user.\n\nIf onSearch is passed into props, call onSearch to allow AJAX autocomplete",
      "modifiers": [],
      "params": [
        {
          "name": "e"
        }
      ],
      "returns": null,
      "description": "Change state to reflect new inputValue typed by user.\n\nIf onSearch is passed into props, call onSearch to allow AJAX autocomplete"
    },
    {
      "name": "onInputKeyDown",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "event",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "onWrapperClick",
      "docblock": "When user clicks on Dropdown, focus on the text input inside the dropdown",
      "modifiers": [],
      "params": [
        {
          "name": "e"
        }
      ],
      "returns": null,
      "description": "When user clicks on Dropdown, focus on the text input inside the dropdown"
    },
    {
      "name": "focusInput",
      "docblock": null,
      "modifiers": [],
      "params": [],
      "returns": null
    },
    {
      "name": "inputRef",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "c",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "inputWrapperRef",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "c",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "renderArrowIcon",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "isOpen",
          "type": null
        }
      ],
      "returns": null
    }
  ],
  "props": {
    "classes": {
      "flowType": {
        "name": "Object"
      },
      "required": true,
      "description": ""
    },
    "className": {
      "flowType": {
        "name": "string"
      },
      "required": true,
      "description": "Accepts any classNames to be passed down to the component."
    },
    "closeOnSelect": {
      "flowType": {
        "name": "boolean"
      },
      "required": true,
      "description": "Whether or not the input should close when a value is selected."
    },
    "field": {
      "flowType": {
        "name": "Object"
      },
      "required": true,
      "description": ""
    },
    "form": {
      "flowType": {
        "name": "Object"
      },
      "required": true,
      "description": ""
    },
    "onSearch": {
      "flowType": {
        "name": "signature",
        "type": "function",
        "raw": "(value: {\n  inputValue: string,\n  originalItems: Items,\n  currentItems: Items,\n  setItems: (value: Items) => void,\n}) => Items",
        "signature": {
          "arguments": [
            {
              "name": "value",
              "type": {
                "name": "signature",
                "type": "object",
                "raw": "{\n  inputValue: string,\n  originalItems: Items,\n  currentItems: Items,\n  setItems: (value: Items) => void,\n}",
                "signature": {
                  "properties": [
                    {
                      "key": "inputValue",
                      "value": {
                        "name": "string",
                        "required": true
                      }
                    },
                    {
                      "key": "originalItems",
                      "value": {
                        "name": "Array",
                        "elements": [
                          {
                            "name": "signature",
                            "type": "object",
                            "raw": "{\n  label: string,\n  value: string,\n}",
                            "signature": {
                              "properties": [
                                {
                                  "key": "label",
                                  "value": {
                                    "name": "string",
                                    "required": true
                                  }
                                },
                                {
                                  "key": "value",
                                  "value": {
                                    "name": "string",
                                    "required": true
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "raw": "Array<Item>",
                        "required": true
                      }
                    },
                    {
                      "key": "currentItems",
                      "value": {
                        "name": "Array",
                        "elements": [
                          {
                            "name": "signature",
                            "type": "object",
                            "raw": "{\n  label: string,\n  value: string,\n}",
                            "signature": {
                              "properties": [
                                {
                                  "key": "label",
                                  "value": {
                                    "name": "string",
                                    "required": true
                                  }
                                },
                                {
                                  "key": "value",
                                  "value": {
                                    "name": "string",
                                    "required": true
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "raw": "Array<Item>",
                        "required": true
                      }
                    },
                    {
                      "key": "setItems",
                      "value": {
                        "name": "signature",
                        "type": "function",
                        "raw": "(value: Items) => void",
                        "signature": {
                          "arguments": [
                            {
                              "name": "value",
                              "type": {
                                "name": "Array",
                                "elements": [
                                  {
                                    "name": "signature",
                                    "type": "object",
                                    "raw": "{\n  label: string,\n  value: string,\n}",
                                    "signature": {
                                      "properties": [
                                        {
                                          "key": "label",
                                          "value": {
                                            "name": "string",
                                            "required": true
                                          }
                                        },
                                        {
                                          "key": "value",
                                          "value": {
                                            "name": "string",
                                            "required": true
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "raw": "Array<Item>",
                                "required": true
                              }
                            }
                          ],
                          "return": {
                            "name": "void"
                          }
                        },
                        "required": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "return": {
            "name": "Array",
            "elements": [
              {
                "name": "signature",
                "type": "object",
                "raw": "{\n  label: string,\n  value: string,\n}",
                "signature": {
                  "properties": [
                    {
                      "key": "label",
                      "value": {
                        "name": "string",
                        "required": true
                      }
                    },
                    {
                      "key": "value",
                      "value": {
                        "name": "string",
                        "required": true
                      }
                    }
                  ]
                }
              }
            ],
            "raw": "Array<Item>",
            "required": true
          }
        }
      },
      "required": false,
      "description": "Method to get more dropdown items on search."
    },
    "items": {
      "flowType": {
        "name": "Array",
        "elements": [
          {
            "name": "signature",
            "type": "object",
            "raw": "{\n  label: string,\n  value: string,\n}",
            "signature": {
              "properties": [
                {
                  "key": "label",
                  "value": {
                    "name": "string",
                    "required": true
                  }
                },
                {
                  "key": "value",
                  "value": {
                    "name": "string",
                    "required": true
                  }
                }
              ]
            }
          }
        ],
        "raw": "Array<Item>"
      },
      "required": true,
      "description": "Accepts an array of objects with the shape { label: 'Banana', value: 'Banana' }"
    },
    "label": {
      "flowType": {
        "name": "string"
      },
      "required": true,
      "description": "Text input for the label used inside the component."
    },
    "loading": {
      "flowType": {
        "name": "boolean"
      },
      "required": true,
      "description": "Shows loading indicator in dropdown"
    },
    "tags": {
      "flowType": {
        "name": "boolean"
      },
      "required": false,
      "description": "Whether or not custom tags can be added to the MultiSelect.\nTags are strings that the user can type and select that are not included in Items"
    },
    "theme": {
      "flowType": {
        "name": "Object"
      },
      "required": true,
      "description": ""
    },
    "withScaffold": {
      "flowType": {
        "name": "boolean"
      },
      "required": true,
      "description": "If the scaffold should be used."
    }
  }
}